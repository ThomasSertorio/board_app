var CommentBox = React.createClass({

  loadCommentsFromServer(){
    $.ajax({
      url: Routes.comment_index_path(),
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data.comments});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(Routes.comment_index_path(), status, err.toString());
      }.bind(this)
    });
  },

  getInitialState: function(){
    return {data: []};
  },

  componentDidMount: function() {
    this.loadCommentsFromServer();
    // setInterval(this.loadCommentsFromServer, 2000);
  },

  handleCommentSubmit: function(comment){
    // TODO: submit to the server and refresh the list
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});

    $.ajax({
      url: Routes.save_comment_index_path({ format: 'json' }),
      dataType: 'json',
      type: 'POST',
      data: {comment: comment},
      cache: false,
      success: function(data) {
        this.setState({data: data.comments});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(Routes.comment_index_path(), status, err.toString());
      }.bind(this)
    });
  },


  render: function() {
    return (
      <div className="commentBox">
        <h2>Comments</h2>
        <CommentList data={this.state.data} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
});
